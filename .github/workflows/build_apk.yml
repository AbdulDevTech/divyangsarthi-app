name: Build APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Recommended: pin a concrete Flutter SDK to avoid resolution problems.
  # Update this value to a specific version when you want reproducible builds.
  FLUTTER_VERSION: '3.13.0' # <- change to a specific version compatible with your project
  # Alternative: use 'latest' to always install the newest release:
  # FLUTTER_VERSION: 'latest'

jobs:
  build-apk:
    name: Build release APK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find Flutter project root
        id: find
        run: |
          echo "Looking for pubspec.yaml in common locations..."
          if [ -f ./pubspec.yaml ]; then
            P='.'
          elif [ -f ./divyangsarthi-app/pubspec.yaml ]; then
            P='./divyangsarthi-app'
          elif [ -f ./app/pubspec.yaml ]; then
            P='./app'
          else
            # fallback to find as last resort
            P=$(find . -name pubspec.yaml -print -quit | xargs -r dirname || true)
          fi
          if [ -z "$P" ]; then
            echo "No pubspec.yaml found in repo; listing workspace for debugging:"
            ls -la || true
            echo "Defaulting PROJECT_DIR to repo root '.'"
            P='.'
          fi
          echo "PROJECT_DIR=$P" >> $GITHUB_ENV
          echo "project_dir=$P" >> $GITHUB_OUTPUT
          echo "Project dir set to: $P"

      - name: Copy .env.sample to .env (if present)
        run: |
          TARGET_DIR="${{ steps.find.outputs.project_dir }}"
          echo "TARGET_DIR=$TARGET_DIR"
          if [ -f "$GITHUB_WORKSPACE/.env.sample" ]; then
            echo "Found .env.sample at repo root; copying to $TARGET_DIR/.env"
            cp "$GITHUB_WORKSPACE/.env.sample" "$TARGET_DIR/.env"
            echo "Copied .env.sample to $TARGET_DIR/.env"
          else
            echo ".env.sample not found in repo root; skipping"
          fi

      - name: Populate .env from GitHub Secret (if set)
        run: |
          TARGET_DIR="${{ steps.find.outputs.project_dir }}"
          echo "TARGET_DIR=$TARGET_DIR"
          echo "${{ secrets.divyangsarthi_codebase }}" > "$TARGET_DIR/.env.tmp" || true
          if [ -s "$TARGET_DIR/.env.tmp" ]; then
            mv "$TARGET_DIR/.env.tmp" "$TARGET_DIR/.env"
            echo "Wrote secret to $TARGET_DIR/.env"
          else
            echo "GitHub secret 'divyangsarthi_codebase' not set or empty; skipping"
            rm -f "$TARGET_DIR/.env.tmp" || true
          fi

      - name: Ensure .env exists
        run: |
          TARGET_DIR="${{ steps.find.outputs.project_dir }}"
          echo "TARGET_DIR=$TARGET_DIR"
          if [ ! -f "$TARGET_DIR/.env" ]; then
            echo "No .env found; creating an empty .env at $TARGET_DIR/.env"
            : > "$TARGET_DIR/.env"
            echo "Created empty .env"
          else
            echo ".env already exists at $TARGET_DIR/.env"
          fi

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Flutter (subosito/flutter-action@v2) - pinned version
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'
          # cache: true  # uncomment to enable action caching of Flutter SDK (can speed up runs)

      - name: "Debug: show installed flutter and env"
        run: |
          echo "FLUTTER_VERSION=${{ env.FLUTTER_VERSION }}"
          flutter --version || true
          which flutter || true
          ls -la ${{ runner.temp }} || true

      - name: Ensure Flutter platform directories (android/ios) exist
        working-directory: ${{ steps.find.outputs.project_dir }}
        run: |
          echo "Checking for android/ in $(pwd)"
          if [ -d android ]; then
            echo "android/ already exists"
          else
            echo "android/ missing â€” running 'flutter create -t app .' to generate platform folders"
            flutter create -t app .
            echo "Generated platform folders"
          fi

      - name: Verify project layout and Install dependencies
        working-directory: ${{ steps.find.outputs.project_dir }}
        run: |
          set -x
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "Current pwd: $(pwd)"
          echo "Real path pwd: $(realpath .)"
          echo "Real path target: $(realpath '${{ steps.find.outputs.project_dir }}')" || true
          echo "Listing current dir:"; ls -la
          echo "Listing workspace root:"; ls -la $GITHUB_WORKSPACE || true
          echo "Checking for pubspec.yaml in current dir:"; if [ -f pubspec.yaml ]; then echo "FOUND pubspec.yaml"; else echo "MISSING pubspec.yaml"; fi
          echo "Stat pubspec.yaml (if present):"; stat pubspec.yaml || true
          echo "First 30 lines of pubspec.yaml (if present):"; sed -n '1,30p' pubspec.yaml || true
          flutter pub get

      - name: Verify build dir and Build debug APK
        working-directory: ${{ steps.find.outputs.project_dir }}
        run: |
          set -x
          echo "pwd: $(pwd)"
          echo "Listing project dir:"; ls -la
          echo "Listing android dir (if any):"; ls -la android || true
          echo "Listing build output dir (pre-build):"; ls -la build || true
          flutter build apk --debug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: '**/app-debug.apk'

# Notes:
# - If you want reproducible builds, pin FLUTTER_VERSION to a specific published version (recommended).
# - If you prefer automatic updates set FLUTTER_VERSION: 'latest' (may cause unexpected changes).
# - If you still see "Unable to determine Flutter version for channel" errors:
#    * Try pinning to a specific version (as above).
#    * Ensure GitHub Actions runners have network access (transient network issues can cause resolution failures).
#    * Consider switching to a different setup action (example: subosito is common, but other community/setup-flutter actions exist).