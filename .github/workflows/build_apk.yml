name: Build APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Recommended: pin a concrete Flutter SDK to avoid resolution problems.
  # Update this value to a specific version when you want reproducible builds.
  FLUTTER_VERSION: '3.13.0' # <- change to a specific version compatible with your project
  # Alternative: use 'latest' to always install the newest release:
  # FLUTTER_VERSION: 'latest'

jobs:
  build-apk:
    name: Build release APK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find Flutter project root
        run: |
          echo "Looking for pubspec.yaml in common locations..."
          if [ -f ./pubspec.yaml ]; then
            P='.'
          elif [ -f ./divyangsarthi-app/pubspec.yaml ]; then
            P='./divyangsarthi-app'
          elif [ -f ./app/pubspec.yaml ]; then
            P='./app'
          else
            # fallback to find as last resort
            P=$(find . -name pubspec.yaml -print -quit | xargs -r dirname || true)
          fi
          if [ -z "$P" ]; then
            echo "No pubspec.yaml found in repo; listing workspace for debugging:"
            ls -la || true
            echo "Defaulting PROJECT_DIR to repo root '.'"
            P='.'
          fi
          echo "PROJECT_DIR=$P" >> $GITHUB_ENV
          echo "Project dir set to: $P"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Flutter (subosito/flutter-action@v2) - pinned version
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.0'
          # cache: true  # uncomment to enable action caching of Flutter SDK (can speed up runs)

      - name: "Debug: show installed flutter and env"
        run: |
          echo "FLUTTER_VERSION=${{ env.FLUTTER_VERSION }}"
          flutter --version || true
          which flutter || true
          ls -la ${{ runner.temp }} || true

      - name: Install dependencies
        run: |
          echo "Using PROJECT_DIR=$PROJECT_DIR"
          cd "$PROJECT_DIR"
          flutter pub get

      - name: Build debug APK
        run: |
          echo "Using PROJECT_DIR=$PROJECT_DIR"
          cd "$PROJECT_DIR"
          flutter build apk --debug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: '**/app-debug.apk'

# Notes:
# - If you want reproducible builds, pin FLUTTER_VERSION to a specific published version (recommended).
# - If you prefer automatic updates set FLUTTER_VERSION: 'latest' (may cause unexpected changes).
# - If you still see "Unable to determine Flutter version for channel" errors:
#    * Try pinning to a specific version (as above).
#    * Ensure GitHub Actions runners have network access (transient network issues can cause resolution failures).
#    * Consider switching to a different setup action (example: subosito is common, but other community/setup-flutter actions exist).